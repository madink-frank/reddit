name: Security - Dependency and Code Security Scanning

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  dependency-security:
    runs-on: ubuntu-latest
    name: Dependency Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
        
    - name: Install project dependencies
      run: |
        pip install -r requirements.txt
        
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check --short-report
      continue-on-error: true
      
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit --format=cyclonedx-json --output=pip-audit-cyclonedx.json || true
        pip-audit
      continue-on-error: true
      
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          pip-audit-report.json
          pip-audit-cyclonedx.json

  code-security:
    runs-on: ubuntu-latest
    name: Code Security Analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit semgrep
        
    - name: Run Bandit security linter
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ -f txt
      continue-on-error: true
      
    - name: Run Semgrep security analysis
      run: |
        semgrep --config=auto --json --output=semgrep-report.json app/ || true
        semgrep --config=auto app/
      continue-on-error: true
      
    - name: Upload code security reports
      uses: actions/upload-artifact@v3
      with:
        name: code-security-reports
        path: |
          bandit-report.json
          semgrep-report.json

  docker-security:
    runs-on: ubuntu-latest
    name: Docker Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: false
        tags: reddit-content-platform:security-scan
        load: true
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'reddit-content-platform:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  secrets-scan:
    runs-on: ubuntu-latest
    name: Secrets Detection
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  dependency-update:
    runs-on: ubuntu-latest
    name: Check for Dependency Updates
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install pip-tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools
        
    - name: Check for outdated packages
      run: |
        pip list --outdated --format=json > outdated-packages.json
        cat outdated-packages.json
        
    - name: Create issue for outdated packages
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          try {
            const outdated = JSON.parse(fs.readFileSync('outdated-packages.json', 'utf8'));
            
            if (outdated.length > 0) {
              let body = '## ðŸ“¦ Outdated Dependencies Found\n\n';
              body += 'The following packages have newer versions available:\n\n';
              body += '| Package | Current | Latest |\n';
              body += '|---------|---------|--------|\n';
              
              outdated.forEach(pkg => {
                body += `| ${pkg.name} | ${pkg.version} | ${pkg.latest_version} |\n`;
              });
              
              body += '\n**Recommendation**: Review and update these dependencies to get the latest security fixes and features.\n';
              body += '\n*This issue was automatically created by the security workflow.*';
              
              // Check if similar issue already exists
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: 'dependencies',
                state: 'open'
              });
              
              const existingIssue = issues.data.find(issue => 
                issue.title.includes('Outdated Dependencies')
              );
              
              if (existingIssue) {
                // Update existing issue
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: body
                });
              } else {
                // Create new issue
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: 'ðŸ“¦ Outdated Dependencies Detected',
                  body: body,
                  labels: ['dependencies', 'security', 'maintenance']
                });
              }
            }
          } catch (error) {
            console.log('No outdated packages found or error reading file');
          }

  security-summary:
    needs: [dependency-security, code-security, docker-security, secrets-scan]
    runs-on: ubuntu-latest
    name: Security Summary
    if: always()
    
    steps:
    - name: Download security reports
      uses: actions/download-artifact@v3
      with:
        name: security-reports
        path: ./security-reports/
      continue-on-error: true
      
    - name: Download code security reports
      uses: actions/download-artifact@v3
      with:
        name: code-security-reports
        path: ./code-security-reports/
      continue-on-error: true
      
    - name: Create security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        echo "- **Dependency Security**: ${{ needs.dependency-security.result }}" >> security-summary.md
        echo "- **Code Security**: ${{ needs.code-security.result }}" >> security-summary.md
        echo "- **Docker Security**: ${{ needs.docker-security.result }}" >> security-summary.md
        echo "- **Secrets Detection**: ${{ needs.secrets-scan.result }}" >> security-summary.md
        echo "" >> security-summary.md
        echo "Detailed reports are available in the workflow artifacts." >> security-summary.md
        
        cat security-summary.md
        
    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md