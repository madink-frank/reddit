name: CD - Deploy to Railway

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests Before Deploy
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up test environment variables
      run: |
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "CELERY_BROKER_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "CELERY_RESULT_BACKEND=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "JWT_SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "REDDIT_CLIENT_ID=test_client_id" >> $GITHUB_ENV
        echo "REDDIT_CLIENT_SECRET=test_client_secret" >> $GITHUB_ENV
        echo "ENVIRONMENT=testing" >> $GITHUB_ENV
        
    - name: Run database migrations
      run: |
        alembic upgrade head
        
    - name: Run tests
      run: |
        pytest -v --tb=short

  deploy:
    needs: test
    runs-on: ubuntu-latest
    name: Deploy to Railway
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Railway CLI
      run: |
        npm install -g @railway/cli
        
    - name: Deploy to Railway
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        railway login --token $RAILWAY_TOKEN
        railway up --detach
        
    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to complete..."
        sleep 60
        
    - name: Run database migrations
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        railway login --token $RAILWAY_TOKEN
        railway run alembic upgrade head
        
    - name: Health check
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        railway login --token $RAILWAY_TOKEN
        RAILWAY_URL=$(railway domain | grep -o 'https://[^[:space:]]*' | head -1)
        if [ -n "$RAILWAY_URL" ]; then
          echo "Checking health at: $RAILWAY_URL/health"
          curl -f "$RAILWAY_URL/health" || exit 1
          echo "Deployment successful! Application is healthy."
          echo "API Documentation: $RAILWAY_URL/docs"
        else
          echo "Could not determine Railway URL"
          exit 1
        fi

  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    name: Notify Deployment Status
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Deployment to ${{ github.event.inputs.environment || 'production' }} successful!"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        
    - name: Notify Failure
      if: needs.deploy.result == 'failure' || needs.test.result == 'failure'
      run: |
        echo "❌ Deployment to ${{ github.event.inputs.environment || 'production' }} failed!"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        exit 1