#!/usr/bin/env node

/**
 * Monitoring Setup Script
 * Sets up Google Analytics, error tracking, and performance monitoring
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (query) => new Promise((resolve) => rl.question(query, resolve));

async function setupMonitoring() {
  console.log('🔧 Setting up monitoring for Public Blog...\n');

  try {
    // Get Google Analytics configuration
    const gaId = await question('Enter your Google Analytics ID (G-XXXXXXXXXX): ');
    const gtmId = await question('Enter your Google Tag Manager ID (GTM-XXXXXXX) [optional]: ');
    
    // Get error tracking configuration
    const sentryDsn = await question('Enter your Sentry DSN [optional]: ');
    const errorEndpoint = await question('Enter custom error tracking endpoint [optional]: ');
    
    // Get environment
    const environment = await question('Environment (production/staging/development) [production]: ') || 'production';
    
    // Create environment file
    const envContent = `# Monitoring Configuration - Generated by setup script
# Google Analytics
VITE_GOOGLE_ANALYTICS_ID=${gaId}
${gtmId ? `VITE_GOOGLE_TAG_MANAGER_ID=${gtmId}` : '# VITE_GOOGLE_TAG_MANAGER_ID='}

# Error Tracking
${sentryDsn ? `VITE_SENTRY_DSN=${sentryDsn}` : '# VITE_SENTRY_DSN='}
${errorEndpoint ? `VITE_ERROR_TRACKING_ENDPOINT=${errorEndpoint}` : '# VITE_ERROR_TRACKING_ENDPOINT='}

# Monitoring Settings
VITE_ENABLE_PERFORMANCE_TRACKING=true
VITE_ENABLE_ERROR_TRACKING=true
VITE_ENABLE_ANALYTICS=true
VITE_DEBUG_MODE=${environment === 'development' ? 'true' : 'false'}

# Environment
NODE_ENV=${environment}
`;

    const envFile = `.env.${environment}`;
    fs.writeFileSync(envFile, envContent);
    console.log(`✅ Created ${envFile}`);

    // Update package.json scripts if needed
    const packageJsonPath = path.join(process.cwd(), 'package.json');
    if (fs.existsSync(packageJsonPath)) {
      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
      
      // Add monitoring scripts if they don't exist
      if (!packageJson.scripts['monitor:build']) {
        packageJson.scripts['monitor:build'] = 'npm run build && npm run analyze:bundle';
      }
      
      if (!packageJson.scripts['analyze:bundle']) {
        packageJson.scripts['analyze:bundle'] = 'npx vite-bundle-analyzer dist/stats.html';
      }
      
      if (!packageJson.scripts['test:performance']) {
        packageJson.scripts['test:performance'] = 'lighthouse http://localhost:3000 --output=html --output-path=./lighthouse-report.html';
      }
      
      fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
      console.log('✅ Updated package.json scripts');
    }

    // Create monitoring configuration file
    const monitoringConfig = {
      analytics: {
        googleAnalyticsId: gaId,
        googleTagManagerId: gtmId || null,
        enableDebug: environment === 'development',
        enablePerformanceTracking: true,
        enableErrorTracking: true
      },
      errorTracking: {
        sentryDsn: sentryDsn || null,
        customEndpoint: errorEndpoint || null,
        enableConsoleCapture: true,
        enableBreadcrumbs: true
      },
      performance: {
        enableWebVitals: true,
        enableResourceMonitoring: true,
        enableMemoryMonitoring: true,
        budgetThresholds: {
          fcp: 1800,
          lcp: 2500,
          fid: 100,
          cls: 0.1,
          ttfb: 800
        }
      },
      environment: environment
    };

    fs.writeFileSync('monitoring.config.json', JSON.stringify(monitoringConfig, null, 2));
    console.log('✅ Created monitoring.config.json');

    // Create Vercel environment variables file
    if (environment === 'production') {
      const vercelEnv = `# Vercel Environment Variables
# Copy these to your Vercel project dashboard

VITE_GOOGLE_ANALYTICS_ID=${gaId}
${gtmId ? `VITE_GOOGLE_TAG_MANAGER_ID=${gtmId}` : ''}
${sentryDsn ? `VITE_SENTRY_DSN=${sentryDsn}` : ''}
${errorEndpoint ? `VITE_ERROR_TRACKING_ENDPOINT=${errorEndpoint}` : ''}
VITE_ENABLE_PERFORMANCE_TRACKING=true
VITE_ENABLE_ERROR_TRACKING=true
VITE_ENABLE_ANALYTICS=true
VITE_DEBUG_MODE=false
NODE_ENV=production
`;

      fs.writeFileSync('vercel-env-vars.txt', vercelEnv);
      console.log('✅ Created vercel-env-vars.txt (copy these to Vercel dashboard)');
    }

    // Create monitoring documentation
    const monitoringDocs = `# Monitoring Setup

## Configuration

This project has been configured with the following monitoring tools:

### Google Analytics
- **ID**: ${gaId}
${gtmId ? `- **GTM ID**: ${gtmId}` : ''}
- **Performance Tracking**: Enabled
- **Error Tracking**: Enabled

### Error Tracking
${sentryDsn ? `- **Sentry DSN**: ${sentryDsn}` : '- **Sentry**: Not configured'}
${errorEndpoint ? `- **Custom Endpoint**: ${errorEndpoint}` : '- **Custom Endpoint**: Not configured'}

### Performance Monitoring
- **Web Vitals**: Enabled
- **Resource Monitoring**: Enabled
- **Memory Monitoring**: Enabled
- **Performance Budget**: Configured

## Usage

### Development
\`\`\`bash
npm run dev
\`\`\`

### Production Build with Monitoring
\`\`\`bash
npm run monitor:build
\`\`\`

### Performance Testing
\`\`\`bash
npm run test:performance
\`\`\`

### Bundle Analysis
\`\`\`bash
npm run analyze:bundle
\`\`\`

## Monitoring Dashboard

In development mode, you can access the monitoring dashboard by:
1. Opening the app in development mode
2. Looking for the monitoring panel in the bottom-right corner
3. Or by adding \`?debug=true\` to any URL

## Vercel Deployment

1. Copy the environment variables from \`vercel-env-vars.txt\`
2. Add them to your Vercel project dashboard
3. Redeploy your application

## Google Analytics Setup

1. Create a Google Analytics 4 property
2. Copy the Measurement ID (G-XXXXXXXXXX)
3. Add it to your environment variables
4. Deploy your application

## Performance Budget

The following performance budget is configured:
- **First Contentful Paint (FCP)**: < 1.8s
- **Largest Contentful Paint (LCP)**: < 2.5s
- **First Input Delay (FID)**: < 100ms
- **Cumulative Layout Shift (CLS)**: < 0.1
- **Time to First Byte (TTFB)**: < 800ms

## Troubleshooting

### Analytics Not Working
1. Check that the Google Analytics ID is correct
2. Verify environment variables are set
3. Check browser console for errors
4. Ensure ad blockers are not interfering

### Performance Issues
1. Run \`npm run analyze:bundle\` to check bundle size
2. Use the monitoring dashboard to identify bottlenecks
3. Check the performance budget violations
4. Run Lighthouse audits with \`npm run test:performance\`

### Error Tracking
1. Check browser console for error messages
2. Verify error tracking configuration
3. Test error boundary functionality
4. Check network requests for error reporting
`;

    fs.writeFileSync('MONITORING.md', monitoringDocs);
    console.log('✅ Created MONITORING.md documentation');

    console.log('\n🎉 Monitoring setup complete!');
    console.log('\nNext steps:');
    console.log('1. Review the generated configuration files');
    console.log('2. Set up your Google Analytics property');
    console.log('3. Deploy to Vercel with the provided environment variables');
    console.log('4. Test the monitoring setup');
    console.log('\nFor more information, see MONITORING.md');

  } catch (error) {
    console.error('❌ Error setting up monitoring:', error);
  } finally {
    rl.close();
  }
}

// Run the setup
setupMonitoring();